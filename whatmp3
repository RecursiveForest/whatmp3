#!/usr/bin/env python

##############################################################
# whatmp3 - Convert FLAC to mp3, create what.cd torrent.
# Created by shardz (logik.li), demonstar55, and The_Creator
##############################################################

import os
import re
import fnmatch
import shutil
from optparse import OptionParser
import threading
import multiprocessing

VERSION = "3.7"

### BEGIN CONFIGURATION ###

# Output folder unless specified: ("/home/user/Desktop/")
#output = os.path.join(os.environ['HOME'], "Desktop/")
output = os.getcwd()

# Separate torrent output folder (defaults to output):
torrent_dir = output

# Do you want to copy additional files (.jpg, .log, etc)?
copyother = 1

# Do you want to zeropad tracknumbers? (1 => 01, 2 => 02 ...)
zeropad = 1

# Do you want to dither FLACs to 16/44 before encoding?
dither = 0

# Specify tracker ("http://tracker.what.cd:34000/")
tracker = "http://tracker.what.cd:34000/"

# Specify torrent passkey
passkey = "Linus Torvalds disapproves."

# Max number of threads (ex: Normal: 1, Dual-core = 2, Hyperthreaded Dual-core = 4)
max_threads = multiprocessing.cpu_count()

# Tags to copy (note: changing/adding to these requires changing/adding values in/to 'encoders' below)
copy_tags = ('TITLE', 'ALBUM', 'ARTIST', 'TRACKNUMBER', 'GENRE', 'COMMENT', 'DATE')

# Default encoding options
enc_options = {
	'320':	{'enc': 'lame',  	'ext': '.mp3',	'opts': '-q 0 -b 320 --ignore-tag-errors --noreplaygain'},
	'V0':	{'enc': 'lame',		'ext': '.mp3',	'opts': '-q 0 -V 0 --vbr-new --ignore-tag-errors --noreplaygain'},
	'V2':	{'enc': 'lame',		'ext': '.mp3',	'opts': '-q 0 -V 2 --vbr-new --ignore-tag-errors --noreplaygain'},
	'Q8':	{'enc': 'oggenc',	'ext': '.ogg',	'opts': '-q 8 --utf8'},
	'AAC':	{'enc': 'neroAacEnc',	'ext': '.aac',	'opts': '-br 320000'},
	'ALAC':	{'enc': 'ffmpeg',	'ext': '.alac',	'opts': '-i - -acodec alac'},
	'FLAC': {'enc': 'flac',		'ext': '.flac',	'opts': '--best'}
}

encoders = {
	'lame':	{
		'enc':		'lame -S %(opts)s %(tags)s --add-id3v2 - "%(filename)s" 2>&1',
		'TITLE':	'--tt "%(TITLE)s"',
		'ALBUM':	'--tl "%(ALBUM)s"',
		'ARTIST':	'--ta "%(ARTIST)s"',
		'TRACKNUMBER':	'--tn "%(TRACKNUMBER)s"',
		'GENRE':	'--tg "%(GENRE)s"',
		'DATE':		'--ty "%(DATE)s"',
		'COMMENT':	'--tc "%(COMMENT)s"',
		'regain':	'mp3gain -q -c -s i "%s"/*.mp3'
	},
	'oggenc': {
		'enc':		'oggenc -Q %(opts)s %(tags)s -o "%(filename)s" - 2>&1',
		'TITLE':	'-t "%(TITLE)s"',
		'ALBUM':	'-l "%(ALBUM)s"',
		'ARTIST':	'-a "%(ARTIST)s"',
		'TRACKNUMBER':	'-N "%(TRACKNUMBER)s"',
		'GENRE':	'-G "%(GENRE)s"',
		'DATE':		'-d "%(DATE)s"',
		'COMMENT':	'-c "comment=%(COMMENT)s"',
		'regain':	'vorbisgain -qafrs "%s"/*.ogg'
	},
	'neroAacEnc': {
		'enc':		'neroAacEnc %(opts)s -if - -of "%(filename)s" 2>&1 && neroAacTag %(tags)s',
		'TITLE':	'-meta:title="%(TITLE)s"',
		'ALBUM':	'-meta:album="%(ALBUM)s"',
		'ARTIST':	'-meta:artist="%(ARTIST)s"',
		'TRACKNUMBER':	'-meta:track="%(TRACK)s"',
		'GENRE':	'-meta:genre="%(GENRE)s"',
		'DATE':		'-meta:year="%(DATE)s"',
		'COMMENT':	'-meta:comment="%(COMMENT)s"',
		'regain':	'aacgain -q -c "%s"/*.m4a'
	},
	'ffmpeg': {},
	'flac': {
		'enc':		'flac %(opts)s -s %(tags)s -o "%(filename)s" - 2>&1',
		'TITLE':	'-T "TITLE=%(TITLE)s"',
		'ALBUM':	'-T "ALBUM=%(ALBUM)s"',
		'ARTIST':	'-T "ARTIST=%(ARTIST)s"',
		'TRACKNUMBER':	'-T "TRACKNUMBER=%(TRACKNUMBER)s"',
		'GENRE':	'-T "GENRE=%(GENRE)s"',
		'DATE':		'-T "DATE=%(DATE)s"',
		'COMMENT':	'-T "COMMENT=%(COMMENT)s"',
		'regain':	'metaflac --add-replay-gain "%s"/*.flac'
	}
}

dither_command = 'sox -t wav - -b 16 -t wav - rate 44100 dither'

### END CONFIGURATION ###

codecs = []

# os.system() and os.popen() have issues with `
def escape_backtick(pattern):
	pattern = re.sub('`', '\`', pattern)
	return pattern

def escape_quote(pattern):
	pattern = re.sub('"', '\\"', pattern)
	return pattern

def escape_percent(pattern):
	pattern = re.sub('%', '%%', pattern)
	return pattern

class Transcode(threading.Thread):
	def __init__(self, file, flacdir, mp3_dir, codec, options, cv):
		threading.Thread.__init__(self)
		self.file = file
		self.flacdir = flacdir
		self.mp3_dir = mp3_dir
		self.codec = codec
		self.options = options
		self.cv = cv

	def run(self):
		tags = {}
		for tag in copy_tags:
			tagcommand = 'metaflac --show-tag=' + escape_quote(tag) + ' "' + escape_quote(self.file) + '"'
			temp = re.sub('\S.+?=', '', os.popen(escape_backtick(tagcommand)).read().rstrip(), count=1)
			if temp: tags.update({tag:escape_quote(temp)})
			del temp
		if self.options.zeropad and 'TRACKNUMBER' in tags and len(tags['TRACKNUMBER']) == 1:
			tags['TRACKNUMBER'] = '0' + tags['TRACKNUMBER']
		if self.options.skip_genre and 'GENRE' in tags: del tags['GENRE']

		outname = re.sub(re.escape(self.flacdir), self.mp3_dir, self.file)
		outname = re.sub(re.compile('\.flac$', re.IGNORECASE), '', outname)
		if not os.path.exists(os.path.dirname(outname)):
			os.makedirs(os.path.dirname(outname))

		flac_command = encoders[enc_options[self.codec]['enc']]['enc']
		tagline = ''
		for tag in tags:
			tagline = tagline + " " + encoders[enc_options[self.codec]['enc']][tag]
		tagline = tagline % tags
		if self.options.dither:
			flac_command = dither_command + ' | ' + flac_command
		flac_command = 'flac -dc -- "' + escape_percent(escape_quote(self.file)) + '" | ' + flac_command
		flac_command = flac_command % {
			'opts': enc_options[self.codec]['opts'],
			'filename': escape_quote(outname) + enc_options[self.codec]['ext'],
			'tags': tagline
		}
		if self.options.verbose:
			print(escape_backtick(flac_command))
		os.system(escape_backtick(flac_command))

		self.cv.acquire()
		self.cv.notify_all()
		self.cv.release()

		return 0

def make_torrent(options, target):
	if options.verbose: print('Creating torrent...')
	torrent_command = 'mktorrent -p -a "%s/announce" -o "%s.torrent" "%s"' % (options.tracker + options.passkey, escape_quote(os.path.join(options.torrent_dir, os.path.basename(target))), escape_quote(target))
	if options.nodate: torrent_command += ' -d'
	if options.verbose: print(escape_backtick(torrent_command))
	os.system(escape_backtick(torrent_command))

def copy_other(options, flacdir, outdir):
	if options.verbose: print('Copying other files...')
	for dirpath, dirs, files in os.walk(flacdir, topdown=False):
		for name in files:
			if options.ignoredotfiles and fnmatch.fnmatch(name, '.*'):
				continue
			if options.nolog and fnmatch.fnmatch(name.lower(), '*.log'):
				continue
			if options.nocue and fnmatch.fnmatch(name.lower(), '*.cue'):
				continue
			if not fnmatch.fnmatch(name.lower(), '*.flac') and not fnmatch.fnmatch(name.lower(), '*.m3u'):
				d = re.sub(re.escape(flacdir), outdir, dirpath)
				if not os.path.exists(d):
					os.makedirs(d)
				shutil.copy(os.path.join(dirpath, name), d)

def replaygain(options, codec, outdir):
	if options.verbose: print('Applying replay gain...')
	os.system(escape_backtick(encoders[enc_options[codec]['enc']]['regain'] % outdir))
	for dirpath, dirs, files in os.walk(outdir, topdown=False):
		for name in dirs:
			os.system(escape_backtick(encoders[enc_options[codec]['enc']]['regain'] % os.path.join(dirpath, name)))

def add_enc_option(option, opt, value, parser):
	codecs.append(opt[2:])

def main():
	# Parse options and arguments
	usage_text = "%prog [options] [--320 --V2 --Q8 --AAC ...] /path/to/FLAC"
	info_text = "Depends on flac, metaflac, mktorrent, and optionally oggenc, lame, neroAacEnc, neroAacTag, mp3gain, aacgain, vorbisgain, and sox."
	parser = OptionParser(usage=usage_text, version="%prog " + VERSION, epilog=info_text)
	parser.add_option('-v', '--verbose',	action='store_true',	dest='verbose',		default=False,	help='increase verbosity (Default: False)')
	parser.add_option('-n', '--notorrent',	action='store_true',	dest='notorrent',	default=False,	help='do not create a torrent after conversion (Default: False)')
	parser.add_option('-m', '--copyother',	action='store_true',	dest='copyother',	default=copyother,	help='copy additional files (Default: True)')
	parser.add_option('-z', '--zeropad',	action='store_true',	dest='zeropad',		default=zeropad,	help='zeropad track numbers (Default: True)')
	parser.add_option('-r', '--replaygain',	action='store_true',	dest='replaygain',	default=False,	help='add ReplayGain to new files (Default: False)')
	parser.add_option('-d', '--dither',	action='store_true',	dest='dither',		default=dither,	help='dither FLACs to 16/44 before encoding (Default: False)')
	parser.add_option('-c', '--original',	action='store_true',	dest='original',	default=False,	help='create a torrent for the original FLAC')
	parser.add_option('-p', '--passkey',	dest='passkey',		default=passkey,	help='tracker PASSKEY', metavar='PASSKEY')
	parser.add_option('-t', '--tracker',	dest='tracker',		default=tracker,	help='tracker URL (Default: "http://tracker.what.cd:34000/")', metavar='URL')
	parser.add_option('-o', '--output',	dest='output',		default=output,		help='set the output PATH', metavar='PATH')
	parser.add_option('--threads',		type="int",		dest='max_threads',	default=max_threads,	help='set number of threads THREADS (Default: 1)', metavar='THREADS')
	parser.add_option('--torrent-dir',	dest='torrent_dir',	default=torrent_dir,	help='set independent torrent output directory')
	parser.add_option('--skipgenre',        action='store_true',    dest='skip_genre',      default=False,  help='do not insert a genre tag in MP3 files (Default: False)')
	parser.add_option('--nodate',           action='store_true',    dest='nodate',          default=False,  help='do not write the creation date to the .torrent file (Default: False)')
	parser.add_option('--nolog',		action='store_true',	dest='nolog',		default=False,	help='do not copy log files after conversion (Default: False)')
	parser.add_option('--nocue',		action='store_true',	dest='nocue',		default=False,	help='do not copy cue files after conversion (Default: False)')
	parser.add_option('--ignoredotfiles', action='store_true', dest='ignoredotfiles', default=False, help='skip hidden files, beginning with "." (Default: False)')

	for enc_opt in enc_options.keys():
		parser.add_option("--" + enc_opt, action="callback", callback=add_enc_option, help='convert to %s' % (enc_opt))

	(options, flacdirs) = parser.parse_args()
	if len(flacdirs) < 1:
		parser.error("Incorrect number of arguments")
	if not options.output.endswith('/'):
		options.output += '/'
	if len(codecs) == 0 and not options.original:
		print('You need to provide at least one format to transcode to (320, V0, Q8 ...); `whatmp3 --help`')
		parser.error("Incorrect number of arguments")
		exit()

	for flacdir in flacdirs:
		flacdir = os.path.abspath(flacdir)
		flacfiles = []
		if not os.path.exists(options.torrent_dir): os.makedirs(options.torrent_dir)

		for dirpath, dirs, files in os.walk(flacdir, topdown=False):
			for name in files:
				if not options.ignoredotfiles or not fnmatch.fnmatch(name, '.*'):
					if fnmatch.fnmatch(name.lower(), '*.flac'):
						flacfiles.append(os.path.join(dirpath, name))
		if options.original:
			print('Working with FLAC...')
			if options.output and options.passkey and options.tracker and not options.notorrent:
				make_torrent(options, flacdir)
			print('Finished working with FLAC')

		for codec in codecs:
			outdir = os.path.basename(flacdir)
			flacre = re.compile('FLAC', re.IGNORECASE)
			if flacre.search(outdir):
				outdir = flacre.sub(codec, outdir)
			else:
				outdir = outdir + " (" + codec + ")"
			outdir = options.output + outdir
			if not os.path.exists(outdir):
				os.makedirs(outdir)

			print('Encoding with ' + codec + ' started...')
			threads = []
			cv = threading.Condition()
			for file in flacfiles:
				cv.acquire()
				while (threading.activeCount() == max(1, options.max_threads) + 1):
					cv.wait()
				cv.release()
				t=Transcode(file, flacdir, outdir, codec, options, cv)
				t.start()
				threads.append(t)
			for t in threads:
				t.join()
			print('\nEncoding with ' + codec + ' finished.')

			if options.copyother:
				copy_other(options, flacdir, outdir)
			if options.replaygain:
				replaygain(options, codec, outdir)
			if options.output and options.passkey and options.tracker and not options.notorrent:
				make_torrent(options, outdir)

		if options.verbose: print('All done with ' + flacdir + ' ...')
	return 0

if __name__ == '__main__':
	main()
